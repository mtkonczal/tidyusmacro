devtools::document()
devtools::install()
devtools::document()
devtools::load_all()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_color_esp()
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_color_esp()
# ======================================================================
#  Economic Security Project colours, palette, scales & theme
#  Inspired by the structure used in ggthemes
# ======================================================================
# Author:  <you>   |   Package:  <yourpkg>
# ======================================================================
# ----------------------------------------------------------------------
# 1. Brand colour definitions ------------------------------------------
# ----------------------------------------------------------------------
.esp_colours <- c(
`warm navy`  = "#2c3254",
`warm red`   = "#ff8361",
`soft green` = "#70ad8f",
`deep purple`= "#472b51"
)
esp_colours <- function(...) {
cols <- c(...)
if (length(cols) == 0) return(.esp_colours)
.esp_colours[cols]
}
# ----------------------------------------------------------------------
# 2. Palette factory ----------------------------------------------------
# ----------------------------------------------------------------------
esp_pal <- function(reverse = FALSE, ...) {
pal <- .esp_colours
if (reverse) pal <- rev(pal)
function(n) {
if (n > length(pal)) {
warning("Requested ", n, " colours; only ",
length(pal), " brand colours available – colours will repeat.")
}
rep(pal, length.out = n)
}
}
# ----------------------------------------------------------------------
# 3. Scales -------------------------------------------------------------
# ----------------------------------------------------------------------
# Discrete colour scale
scale_colour_esp_d <- function(reverse = FALSE, ...) {
ggplot2::discrete_scale(
"colour", "esp_d",
esp_pal(reverse = reverse), ...
)
}
# Discrete fill scale
scale_fill_esp_d <- function(reverse = FALSE, ...) {
ggplot2::discrete_scale(
"fill", "esp_d",
esp_pal(reverse = reverse), ...
)
}
# Continuous colour scale
scale_colour_esp_c <- function(reverse = FALSE, ...) {
ggplot2::scale_colour_gradientn(
colours = esp_pal(reverse = reverse)(256), ...
)
}
# Continuous fill scale
scale_fill_esp_c <- function(reverse = FALSE, ...) {
ggplot2::scale_fill_gradientn(
colours = esp_pal(reverse = reverse)(256), ...
)
}
# Provide aliases without _d/_c suffix (match ggthemes)
scale_colour_esp  <- scale_colour_esp_d
scale_fill_esp    <- scale_fill_esp_d
scale_color_esp   <- scale_colour_esp   # British / American
# ----------------------------------------------------------------------
# 4. Theme --------------------------------------------------------------
# ----------------------------------------------------------------------
theme_esp <- function(background = c("white", "beige"),
base_size   = 12,
base_family = "Fira Sans") {
background <- match.arg(background)
bg_colour  <- if (background == "white") "#ffffff" else "#f4f2e4"
# Update defaults ONCE per session
esp_update_geom_defaults()
ggplot2::theme_minimal(base_family = base_family,
base_size   = base_size) %+replace%
ggplot2::theme(
# backgrounds
plot.background  = ggplot2::element_rect(fill = bg_colour, colour = NA),
panel.background = ggplot2::element_rect(fill = bg_colour, colour = NA),
# grid
panel.grid.major = ggplot2::element_line(
colour = scales::alpha("#000000", 0.08)),
panel.grid.minor = ggplot2::element_blank(),
# text
plot.title       = ggplot2::element_text(
face = "bold", colour = .esp_colours["warm navy"],
size = base_size * 1.25),
plot.subtitle    = ggplot2::element_text(
colour = .esp_colours["warm navy"]),
axis.title       = ggplot2::element_text(
face = "bold", colour = .esp_colours["warm navy"]),
axis.text        = ggplot2::element_text(
colour = .esp_colours["warm navy"]),
# legend
legend.title     = ggplot2::element_text(
face = "bold", colour = .esp_colours["warm navy"]),
# facet strips
strip.background = ggplot2::element_rect(fill = .esp_colours["warm navy"]),
strip.text       = ggplot2::element_text(
face = "bold", colour = "#ffffff")
)
}
# ----------------------------------------------------------------------
# 5. Set Warm Navy as default geom colour ------------------------------
# ----------------------------------------------------------------------
esp_update_geom_defaults <- function() {
# run once – attach NULL sentinel to global env so we don't repeat
if (isTRUE(getOption("esp.defaults.set"))) return(invisible())
ggplot2::update_geom_defaults("line",
list(colour = esp_colours("warm navy")))
ggplot2::update_geom_defaults("point",
list(colour = esp_colours("warm navy")))
ggplot2::update_geom_defaults("col",
list(fill   = esp_colours("warm navy")))
options("esp.defaults.set" = TRUE)
invisible()
}
devtools::document()
devtools::load_all()
rm(list = c("scale_color_esp", "theme_esp"))
library(tidyverse)
library(tidyusmacro)
library(tidyverse)
library(tidyusmacro)
jolts <- getBLSFiles("jolts", "konczal@gmail.com")
str(jolts)
jolts$display_level - jolts$display_level.x
sum(jolts$display_level - jolts$display_level.x)
jolts$display_level - jolts$display_level.x
dist(jolts$display_level - jolts$display_level.x)
summary(jolts$display_level - jolts$display_level.x)
ocation = "https://apps.bea.gov/national/Release/TXT/",
location = "https://apps.bea.gov/national/Release/TXT/",
location = "https://apps.bea.gov/national/Release/TXT/"
type = "M"
series_url <- file.path(location, "SeriesRegister.txt")
tables_url <- file.path(location, "TablesRegister.txt")
data_url   <- file.path(location, paste0("nipadata", type, ".txt"))
series <- readr::read_csv(series_url, show_col_types = FALSE) %>%
dplyr::rename(SeriesCode = `%SeriesCode`)
library(tidyverse)
series <- readr::read_csv(series_url, show_col_types = FALSE) %>%
dplyr::rename(SeriesCode = `%SeriesCode`)
series
tables <- readr::read_csv(tables_url, show_col_types = FALSE)
data <- readr::read_csv(data_url, show_col_types = FALSE) %>%
dplyr::rename(SeriesCode = `%SeriesCode`)
data <- readr::read_csv(data_url, show_col_types = FALSE)
data
data_url
