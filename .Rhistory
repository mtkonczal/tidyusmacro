ggplot(mpg, aes(displ, hwy, color=as.factor(cyl))) + geom_point() + theme_esp(background = "beige") + scale_fill_esp()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_color_esp()          # ← use the colour version
devtools::document()
devtools::load_all()
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile() +
scale_fill_esp_c() +
theme_esp()
library(tidyverse)
ggplot(faithfuld, aes(waiting, eruptions, fill = density)) +
geom_tile() +
scale_fill_esp_c() +
theme_esp()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
esp_update_geom_defaults
theme_esp
scale_fill_esp_c
esp_colours
.esp_colours
mpg
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp()
esp_update_geom_defaults()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + geom_line() + theme_esp() + esp_update_geom_defaults()
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
devtools::document()
devtools::load_all()   # or detach/attach the package
ggplot(mpg, aes(displ, hwy, colour = as.factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
scale_colour_esp
devtools::load_all()
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
library(tidyverse)
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +
labs(title = "Fuel economy by cylinder count")
f <- scale_colour_esp
environmentName(environment(f))
# Put this in a fresh R session, with **no** package loaded yet -------------
library(ggplot2)
esp_test_cols <- c(
"#2c3254",   # Warm Navy
"#ff8361",   # Warm Red
"#70ad8f",   # Soft Green
"#472b51"    # Deep Purple
)
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
scale_colour_manual(values = esp_test_cols) +
theme_minimal()
devtools::document()   # rebuild .Rd & NAMESPACE
devtools::install()    # or load_all() if you only need it in this session
library(govMacroTools)   # or your package’s name
find(scale_colour_esp)             # "package:govMacroTools"
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
theme_esp(background = "beige") +
scale_colour_esp() +                   # now the discrete scale
labs(title = "Fuel economy by cylinder count")
library(govMacroTools)   # or your package’s name
find(scale_colour_esp)             # "package:govMacroTools"
devtools::document()
devtools::install()
library(govMacroTools)
theme_espdevtools::document()
devtools::document()
devtools::load_all()   # or devtools::install()
library(ggplot2)
library(yourpkg)       # replace with your package name
library(ggplot2)
library(govMacroTools)       # replace with your package name
ggplot(mpg, aes(displ, hwy, colour = factor(cyl))) +
geom_point(size = 3) +
scale_colour_esp() +
theme_esp(background = "beige") +
labs(title = "Fuel economy by cylinder count")
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line() + scale_color_esp()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line() + scale_fill_esp()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color="red")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
background  = c("white", "beige")
match.arg(background)
background  = c("white", "beige")
match.arg(background)
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy())
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = "beige") + geom_line(color=esp_navy())
theme_esp
background  = c("beige", "white")
match.arg(background)
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy())
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::document()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::document()
devtools::document()
devtools::load_all()   # or devtools::install()
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(background = c("beige")) + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Banner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Babgkgnner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Banner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::document()
devtools::load_all()   # or devtools::install()
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp(base_family = "Publico Banner") + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
getFRED("unrate") %>% ggplot(aes(date, unrate)) + theme_esp() + geom_line(color=esp_navy()) + labs(title="This title", caption = "mike Konczal")
devtools::install()
devtools::document()
devtools::load_all()
df <- getFRED("unrate", quits = "JTSQUR")
df
library(tidyverse)
df <- getFRED("unrate", quits = "JTSQUR", keep_all = FALSE) %>%
pivot_longer(-date,names_to = "type", values_to = "value")
df
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_classic()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_fill_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information"
caption = "Mike Konczal")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
devtools::document()
devtools::load_all()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
devtools::document()
devtools::load_all()
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
df <- getFRED(Unemployment = "unrate", Quits = "JTSQUR", keep_all = FALSE) %>%
pivot_longer(-date,names_to = "type", values_to = "value")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
devtools::document()
devtools::load_all()
df <- getFRED(Unemployment = "unrate", Quits = "JTSQUR", keep_all = FALSE) %>%
pivot_longer(-date,names_to = "type", values_to = "value")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "hello this is the thing",
subtitle = "testing more information",
caption = "Mike Konczal")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp() +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp() +
scale_color_esp(base_size=18) +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line() +
theme_esp(base_size = 18) +
scale_color_esp() +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
df %>%
ggplot(aes(date, value, color=type)) +
theme_esp() +
geom_line(size=1.2) +
theme_esp(base_size = 18) +
scale_color_esp() +
labs(title = "Unemployment and Quits Move in Opposite Directions",
subtitle = "BLS: CPS and JOLTS. Monthly, seasonally adjusted.",
caption = "Mike Konczal, Economic Security Project.")
devtools::document()
devtools::load_all()
govMacroTools::getBLSFiles("tktk", "konczal@gmail.com")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::check()
usethis::use_package("dplyr", type = "Imports")
usethis::use_package("magrittr", type = "Imports")
usethis::use_package("purrr", type = "Imports")
usethis::use_package("readr", type = "Imports")
usethis::use_package("rlang", type = "Imports")
devtools::check()
devtools::check()
usethis::use_mit_license("Mike Konczal")
devtools::document()
devtools::check()
usethis::use_package("ggplot2", type = "Imports")
usethis::use_package("scales", type = "Imports")
usethis::use_package("stringi", type = "Imports")
usethis::use_package("tidyr", type = "Imports")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::spell_check()
devtools::spell_check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::spell_check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::release()
spell_check()
devtools::spell_check()
devtools::release()
check_rhub
devtools::check_rhub()
devtools::check_rhub()
devtools::release()
usethis::use_news_md()
usethis::use_news_md()
devtools::document()
devtools::check()
devtools::release()
# Replace narrow no-break space and non-breaking hyphen with safe equivalents
x <- readLines("R/getFRED.R", encoding = "UTF-8")
x <- gsub("\u202F", " ", x)    # narrow no-break space → regular space
x <- gsub("\u2011", "-", x)    # non-breaking hyphen → ASCII hyphen
writeLines(x, "R/getFRED.R", useBytes = TRUE)
styler:::style_selection()
devtools::document()
devtools::check()
unlink("govMacroTools-manual.tex")
devtools::document()
devtools::check()
devtools::build()
install.packages(c("AsioHeaders", "bayestestR", "bigD", "broom", "chromote", "class", "cluster", "commonmark", "curl", "data.table", "diffobj", "evaluate", "forecast", "foreign", "future", "future.apply", "gdtools", "generics", "gert", "gganimate", "gh", "globals", "gt", "hipread", "httpuv", "httr2", "insight", "ipumsr", "jpeg", "KernSmooth", "later", "lattice", "markdown", "MASS", "Matrix", "mgcv", "miniUI", "modelsummary", "nlme", "nnet", "parallelly", "pillar", "pkgbuild", "pkgdown", "plotly", "prodlim", "promises", "ps", "qpdf", "quantmod", "R.cache", "ragg", "Rcpp", "RcppArmadillo", "readxl", "recipes", "rpart", "rrcov", "rsample", "RSQLite", "s2", "shiny", "shinydashboard", "sparsevctrs", "spatial", "survival", "svglite", "systemfonts", "textshaping", "tibble", "tinytable", "utf8", "V8", "webshot2", "websocket", "zeallot", "zip", "zoo"))
devtools::install()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::install()
devtools::install()
devtools::load_all()
getFRED("unrate")
getFRED
df <- tibble(
date  = seq(as.Date("2000-01-01"), by = "year", length.out = 10),
value = seq(100, 190, length.out = 10)
)
library(tidyverse)
df <- tibble(
date  = seq(as.Date("2000-01-01"), by = "year", length.out = 10),
value = seq(100, 190, length.out = 10)
)
df
#' Log-Linear Projection (tidy-eval)
#'
#' Fits a log-linear trend \eqn{\log(value) ~ t} on a calibration window and
#' projects it forward for all rows on/after `start_date`. Accepts bare column
#' names for `date`, `value`, and an optional `group`.
#'
#' @param tbl A data frame or tibble.
#' @param date Bare column name for the date variable (coercible to Date).
#' @param value Bare column name for the numeric series to project.
#' @param start_date Date or string coercible to `Date`; start of calibration.
#' @param end_date Date or string coercible to `Date`; end of calibration.
#' @param group Optional bare column name to group by before projecting.
#'
#' @return A numeric vector `projection` with `NA` before `start_date`, aligned
#'   to the rows of `tbl` (and respecting grouping if supplied).
#'
#' @examples
#' # Deterministic, fast example with an upward (log-linear) trend
#' set.seed(123)
#' n <- 16
#' df <- data.frame(
#'   date  = seq(as.Date("2000-01-01"), by = "quarter", length.out = n),
#'   # upward trend on log-scale + small noise; strictly positive
#'   value = exp(log(100) + 0.03 * (0:(n - 1)) + rnorm(n, sd = 0.02))
#' )
#'
#' proj <- logLinearProjection(
#'   df, date, value,
#'   start_date = "2000-01-01",
#'   end_date   = "2003-12-31"
#' )
#' head(proj)
#'
#' @import dplyr rlang
#' @importFrom stats lm predict
#' @export
logLinearProjection <- function(tbl, date, value, start_date, end_date, group = NULL) {
date_q  <- rlang::enquo(date)
value_q <- rlang::enquo(value)
group_q <- rlang::enquo(group)
start_date <- as.Date(start_date)
end_date   <- as.Date(end_date)
# Normalize inputs: ensure we have Date + numeric working columns
df <- dplyr::mutate(
tbl,
..date  = as.Date(!!date_q),
..value = as.numeric(!!value_q)
)
project_one <- function(d) {
# Calibration window (require positive values for log)
calib <- d %>%
dplyr::filter(..date >= start_date, ..date <= end_date) %>%
dplyr::mutate(t = as.numeric(..date - start_date)) %>%
dplyr::filter(is.finite(..value), ..value > 0)
if (nrow(calib) < 2) {
return(rep(NA_real_, nrow(d)))
}
fit <- stats::lm(log(..value) ~ t, data = calib)
d <- d %>% dplyr::mutate(t = as.numeric(..date - start_date))
proj <- rep(NA_real_, nrow(d))
idx  <- which(d$t >= 0)
if (length(idx) > 0) {
lp <- stats::predict(fit, newdata = data.frame(t = d$t[idx]))
proj[idx] <- exp(lp)
}
proj
}
if (!rlang::quo_is_null(group_q)) {
df <- df %>%
dplyr::group_by(!!group_q, .add = FALSE) %>%
dplyr::mutate(projection = project_one(dplyr::pick(dplyr::everything()))) %>%
dplyr::ungroup()
} else {
df$projection <- project_one(df)
}
df$projection
}
set.seed(123)
n <- 16
df <- data.frame(
date  = seq(as.Date("2000-01-01"), by = "quarter", length.out = n),
# upward trend on log-scale + small noise; strictly positive
value = exp(log(100) + 0.03 * (0:(n - 1)) + rnorm(n, sd = 0.02))
)
df
plot(df$value)
df$log_linear_proj <- logLinearProjection(
df, date, value,
start_date = "2000-01-01",
end_date   = "2003-12-31"
)
df
lines(df$log_linear_proj)
getFRED
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::check()
devtools::build()
